/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
 */

package com.huawei.img.test;

import lombok.SneakyThrows;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.IntStream;

public class ImagePackage {
    public static void main(String[] args) throws IOException {
        File file = new File("D:\\code\\response.png");

        System.out.println();
        Thread thread = new Thread(new Runnable() {
            @SneakyThrows
            @Override
            public void run() {
                long start = System.currentTimeMillis();
                double[][][] imageRGB = getImageRGB(file);
                double[][][] resultRGB = bicubicInterpolation(imageRGB, 0.25, true);
                drawImage(resultRGB);
                long end = System.currentTimeMillis();
                System.out.println(end - start);
            }
        });
        thread.start();


    }

    private static double[][][] bicubicInterpolation(double[][][] img, double scale, boolean antialiasing) {
        int inHeight = img.length;
        int inWidth = img[0].length;
        int inCol = 3;

        int outHeight = (int) Math.ceil(inHeight * scale);
        int outWidth = (int) Math.ceil(inWidth * scale);
        int kernelWidth = 4;
        String kernel = "cubic";

        // get weights and indices
        Map<String, Object> map = calculateWeightsIndices(inHeight, outHeight, scale, kernel, kernelWidth, antialiasing);
        double[][] weightsH = (double[][]) map.get("weights");
        double[][] indicesH = (double[][]) map.get("indices");
        int symLenHs = (int) map.get("symLenS");
        int symLenHe = (int) map.get("sysLenE");

        map = calculateWeightsIndices(inWidth, outWidth, scale, kernel, kernelWidth, antialiasing);
        double[][] weightsW = (double[][]) map.get("weights");
        double[][] indicesW = (double[][]) map.get("indices");
        int symLenWs = (int) map.get("symLenS");
        int symLenWe = (int) map.get("sysLenE");
        /**
         * process H dimension
         * symmetric copying
         */
        double[][][] imgAug = new double[inHeight + symLenHs + symLenHe][inWidth][inCol];
        System.arraycopy(img, 0, imgAug, symLenHs, inHeight);

        double[][][] symPatch = new double[symLenHs][inWidth][inCol];
        System.arraycopy(img, 0, symPatch, 0, symLenHs);//  symPatch = img[:symLenHs, :, :]
        double[][][] symPatchInv = reverseFirstDimArray(symPatch);// symPatchInv = symPatch[::-1]
        System.arraycopy(symPatchInv, 0, imgAug, 0, symLenHs); // imgAug[0:symLenHs] = symPatchInv

        symPatch = resolveSymPatch1(img, symLenHe);// img[-symLenHe:, :, :]
        symPatchInv = reverseFirstDimArray(symPatch);// symPatchInv = symPatch[::-1]
        System.arraycopy(symPatchInv, 0, imgAug, symLenHs + inHeight, symLenHe);// imgAug[symLenHs + inHeight:symLenHs + inHeight + symLenHe] = symPatchInv

        double[][][] out1 = new double[outHeight][inWidth][inCol];
        kernelWidth = weightsH[0].length; // kernelWidth = weightsH.shape[1]

        for (int i = 0; i < outHeight; i++) {
            int idx = (int) indicesH[i][0];
            // 按照列去赋值
            resolveOut1(out1, dotOut1(weightsH[i], getImgAugCol(imgAug, idx, kernelWidth, 0)), i, 0);
            resolveOut1(out1, dotOut1(weightsH[i], getImgAugCol(imgAug, idx, kernelWidth, 1)), i, 1);
            resolveOut1(out1, dotOut1(weightsH[i], getImgAugCol(imgAug, idx, kernelWidth, 2)), i, 2);
        }

        /**
         * process W dimension
         * symmetric copying
         */
        double[][][] out1Aug = new double[outHeight][inWidth + symLenWs + symLenWe][inCol];
        // out1Aug[:, symLenWs:symLenWs + inWidth] = out1
        resolveOut1Aug(out1, out1Aug, symLenWs, symLenWs + inWidth);

        // symPatch = out1[:, :symLenWs, :]
        symPatch = resolveSymPatch2(out1, symLenWs);

        // symPatchInv = symPatch[:, ::-1]
        symPatchInv = reverseArray2(symPatch);

        // out1Aug[:, 0:symLenWs] = symPatchInv
        resolveOut1Aug(symPatchInv, out1Aug, 0, symLenWs);

        // symPatch = out1[:, -symLenWe:, :]
        symPatch = resolveOut1(out1, symLenWe);
        // symPatchInv = symPatch[:, ::-1]
        symPatchInv = reverseArray2(symPatch);
        //  out1Aug[:, symLenWs + inWidth:symLenWs + inWidth + symLenWe] = \
        //        symPatchInv
        resolveOut1Aug(symPatchInv, out1Aug, symLenWs + inWidth, symLenWs + inWidth + symLenWe);

        double[][][] out2 = new double[outHeight][outWidth][inCol];

        kernelWidth = weightsW[0].length;
        for (int i = 0; i < outWidth; i++) {
            int idx = (int) indicesW[i][0];
            resolveOut2(out2, dotOut2(getOut1Aug(out1Aug, idx, kernelWidth, 0), weightsW[i]), i, 0);
            resolveOut2(out2, dotOut2(getOut1Aug(out1Aug, idx, kernelWidth, 1), weightsW[i]), i, 1);
            resolveOut2(out2, dotOut2(getOut1Aug(out1Aug, idx, kernelWidth, 2), weightsW[i]), i, 2);
        }
        clipOut(out2, 0, 255);
        return out2;
    }

    // 第一维操作
    private static double[][][] resolveSymPatch1(double[][][] img, int symLenHe) {
        double[][][] newArr = new double[symLenHe][img[0].length][3];

        for (int i = img.length - 1; i >= img.length - symLenHe; i--) {
            System.arraycopy(img[i], 0, newArr[img.length - 1 - i], 0, img[0].length);
        }
        return newArr;
    }

    private static void clipOut(double[][][] out, double min, double max) {
        for (int i = 0; i < out.length; i++) {
            for (int j = 0; j < out[0].length; j++) {
                for (int k = 0; k < out[0][0].length; k++) {
                    if (out[i][j][k] < min) {
                        out[i][j][k] = min;
                        continue;
                    }
                    if (out[i][j][k] > max) {
                        out[i][j][k] = max;
                    }
                }
            }
        }
    }

    private static double[][][] resolveOut1(double[][][] out1, int symLenWe) {
        double[][][] newArr = new double[out1.length][symLenWe][3];
        // -symLenWe
        for (int i = 0; i < out1.length; i++) {
            for (int j = out1[0].length - 1; j > out1[0].length - 1 - symLenWe; j--) {
                System.arraycopy(out1[i][j], 0, newArr[i][out1[0].length - 1 - j], 0, 3);
            }
        }
        return newArr;
    }

    private static void resolveOut1Aug(double[][][] src, double[][][] dest, int from, int to) {
        for (int i = 0; i < dest.length; i++) {
            for (int j = from; j < to; j++) {
                System.arraycopy(src[i][j - from], 0, dest[i][j], 0, 3);
            }
        }
    }

    // 第二维度上reverse
    private static double[][][] reverseArray2(double[][][] array) {
        double[][][] newArr = new double[array.length][array[0].length][3];
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[0].length; j++) {
                newArr[i][j] = array[i][array[0].length - j - 1];
            }
        }
        return newArr;
    }

    // 第二维操作
    private static double[][][] resolveSymPatch2(double[][][] out1, int symLenWs) {
        double[][][] newArr = new double[out1.length][symLenWs][3];
        for (int i = 0; i < out1.length; i++) {
            for (int j = 0; j < symLenWs; j++) {
                System.arraycopy(out1[i][j], 0, newArr[i][j], 0, 3);
            }
        }
        return newArr;
    }

    private static double[][] getOut1Aug(double[][][] out1Aug, int idx, int kernelWidth, int index) {
        double[][] newArr = new double[out1Aug.length][kernelWidth];

        for (int i = 0; i < out1Aug.length; i++) {
            for (int j = 0; j < kernelWidth; j++) {
                newArr[i][j] = out1Aug[i][j + idx][index];
            }
        }
        return newArr;
    }

    private static double[][] getImgAugCol(double[][][] imgAug, int idx, int kernelWidth, int index) {
        double[][] newArr = new double[kernelWidth][imgAug[0].length];

        for (int i = 0; i < kernelWidth; i++) {
            for (int j = 0; j < imgAug[0].length; j++) {
                newArr[i][j] = imgAug[idx + i][j][index];
            }
        }
        return newArr;
    }

    private static double[] dotOut2(double[][] arr1, double[] arr2) {
        double[] newArr = new double[arr1.length];

        for (int j = 0; j < arr1.length; j++) {
            for (int i = 0; i < arr1[0].length; i++) {
                newArr[j] += arr2[i] * arr1[j][i];
            }
        }
        return newArr;
    }

    private static double[] dotOut1(double[] arr1, double[][] arr2) {
        double[] newArr = new double[arr2[0].length];

        for (int j = 0; j < arr2[0].length; j++) {
            for (int i = 0; i < arr1.length; i++) {
                newArr[j] += arr1[i] * arr2[i][j];
            }
        }
        return newArr;
    }

    private static void resolveOut2(double[][][] out2, double[] dotArr, int index1, int index2) {
        for (int i = 0; i < out2.length; i++) {
            out2[i][index1][index2] = dotArr[i];
        }
    }

    private static void resolveOut1(double[][][] out1, double[] dotArr, int index1, int index2) {
        for (int i = 0; i < out1[index1].length; i++) {
            out1[index1][i][index2] = dotArr[i];
        }
    }

    // 将第一维数组颠倒
    private static double[][][] reverseFirstDimArray(double[][][] array) {
        double[][][] newArr = new double[array.length][][];
        for (int i = 0; i < array.length; i++) {
            newArr[array.length - i - 1] = array[i];
        }
        return newArr;
    }

    private static double[][] _cubic(double[][] x) {
        double[][] absX = absMatrix(x);
        double[][] absX2 = powerMatrix(absX, 2);
        double[][] absX3 = powerMatrix(absX, 3);
        double[][] weights = new double[x.length][x[0].length];
        for (int i = 0; i < x.length; i++) {
            for (int j = 0; j < x[0].length; j++) {
                weights[i][j] = (1.5 * absX3[i][j] - 2.5 * absX2[i][j] + 1) *
                        (absX[i][j] <= 1 ? 1 : 0) + (-0.5 * absX3[i][j] + 2.5 * absX2[i][j] - 4 * absX[i][j] + 2) *
                        (absX[i][j] > 1 && absX[i][j] <= 2 ? 1 : 0);
            }
        }
        return weights;
    }

    private static double[][] powerMatrix(double[][] x, double power) {
        double[][] newArr = new double[x.length][x[0].length];
        for (int i = 0; i < x.length; i++) {
            for (int j = 0; j < x[0].length; j++) {
                newArr[i][j] = Math.pow(x[i][j], power);
            }
        }
        return newArr;
    }

    private static double[][] absMatrix(double[][] x) {
        double[][] newArr = new double[x.length][x[0].length];
        for (int i = 0; i < x.length; i++) {
            for (int j = 0; j < x[0].length; j++) {
                newArr[i][j] = Math.abs(x[i][j]);
            }
        }
        return newArr;
    }

    private static Map<String, Object> calculateWeightsIndices(
            int inLength, int outLength, double scale, String kernel, int kernelWidth, boolean antialiasing
    ) {

        // Use a modified kernel to simultaneously interpolate and antialias larger kernel width
        double _kernelWidth = kernelWidth;
        if (scale < 1 && antialiasing) {
            _kernelWidth = kernelWidth / scale;
        }

        // Output-space coordinates
        double[] x = IntStream.rangeClosed(1, outLength).mapToDouble(Double::valueOf).toArray();

        double[] u = transformX2U(x, scale);

        // What is the left-most pixel that can be involved in the computation?
        double[] left = transformU2Left(u, _kernelWidth);

        int P = (int) (Math.ceil(_kernelWidth) + 2);

        // The indices of the input pixels involved in computing the k-th output
        // pixel are in row k of the indices matrix.
        double[][] indices = resolveIndices1(left, outLength, P);

        // The weights used to compute the k-th output pixel are in row k of the weights matrix.
        double[][] distanceToCenter = getDistance2Center(u, indices, outLength, P);

        //apply cubic kernel
        double[][] weights;
        if (scale < 1 && antialiasing) {//distanceToCenter, scale
            weights = matrixMultiply(_cubic(matrixMultiply(distanceToCenter, scale)), scale);
        } else {
            weights = _cubic(distanceToCenter);
        }
        // Normalize the weights matrix so that each row sums to 1.
        weights = normalizedWeights(weights, outLength, P);
        /**
         * If a column in weights is all zero, get rid of it. only consider the
         * first and last column.
         */
        double[] weightsZeroTmp = new double[weights[0].length];
        for (int j = 0; j < weights[0].length; j++) {
            for (int i = 0; i < weights.length; i++) {
                weightsZeroTmp[j] += weights[i][j] == 0 ? 1 : 0;
            }
        }
        if (!isClose(weightsZeroTmp[0], 0)) {
            indices = arrayCopyColumns(indices, 1, 1 + P - 2);
            weights = arrayCopyColumns(weights, 1, 1 + P - 2);
        }

        if (!isClose(weightsZeroTmp[weightsZeroTmp.length - 1], 0)) {
            indices = arrayCopyColumns(indices, 0, P - 2);
            weights = arrayCopyColumns(weights, 0, P - 2);
        }
        int symLenS = (int) (-1 * getArrayMin(indices) + 1);
        int sysLenE = (int) (getArrayMax(indices) - inLength);
        resolveIndices2(indices, symLenS - 1);
        Map<String, Object> map = new HashMap<>();
        map.put("weights", weights);
        map.put("indices", indices);
        map.put("symLenS", symLenS);
        map.put("sysLenE", sysLenE);
        return map;
    }

    private static void resolveIndices2(double[][] indices, int param) {
        for (int i = 0; i < indices.length; i++) {
            for (int j = 0; j < indices[0].length; j++) {
                indices[i][j] += param;
            }
        }
    }

    // calculate_weights_indices---
    private static double[][] arrayCopyColumns(double[][] array, int from, int to) {
        double[][] newArr = new double[array.length][to - from];
        for (int i = 0; i < array.length; i++) {
            newArr[i] = Arrays.copyOfRange(array[i], from, to);
        }
        return newArr;
    }

    private static double getArrayMax(double[][] array) {
        double max = Double.MIN_VALUE;
        for (double[] arr : array) {
            for (double d : arr) {
                if (d > max) {
                    max = d;
                }
            }
        }
        return max;
    }

    private static double getArrayMin(double[][] array) {
        double min = Double.MAX_VALUE;
        for (double[] arr : array) {
            for (double d : arr) {
                if (d < min) {
                    min = d;
                }
            }
        }
        return min;
    }

    private static boolean isClose(double a, double b) {
        return (a - b) < 1e-6;
    }

    // calculate_weights_indices---
    private static double[][] normalizedWeights(double[][] weights, int outLength, int P) {
        double[][] newArr = new double[outLength][P];
        double[] weightsSum = new double[outLength];
        for (int i = 0; i < weights.length; i++) {
            weightsSum[i] = Arrays.stream(weights[i]).sum();
        }
        // reshape
        for (int i = 0; i < outLength; i++) {
            Arrays.fill(newArr[i], weightsSum[i]);
        }
        // computer
        for (int i = 0; i < outLength; i++) {
            for (int j = 0; j < P; j++) {
                newArr[i][j] = weights[i][j] / newArr[i][j];
            }
        }
        return newArr;
    }

    private static double[][] matrixMultiply(double[][] x, double param) {
        double[][] newArr = new double[x.length][x[0].length];
        for (int i = 0; i < x.length; i++) {
            for (int j = 0; j < x[0].length; j++) {
                newArr[i][j] = x[i][j] * param;
            }
        }
        return newArr;
    }

    private static double[][] matrixMultiply(double[][] x, double[][] y) {
        double[][] newArr = new double[x.length][];
        for (int i = 0; i < x.length; i++) {
            for (int j = 0; j < x[0].length; j++) {
                newArr[i][j] = x[i][j] * y[i][j];
            }
        }
        return newArr;
    }

    // getDistance2Center---
    private static double[][] getDistance2Center(double[] u, double[][] indices, int outLength, int P) {
        double[][] distanceToCenter = new double[outLength][P];
        for (int i = 0; i < outLength; i++) {
            for (int j = 0; j < P; j++) {
                distanceToCenter[i][j] = u[i] - indices[i][j];
            }
        }
        return distanceToCenter;
    }

    // calculate_weights_indices---
    private static double[][] resolveIndices1(double[] left, int outLength, int P) {
        double[][] indices = new double[outLength][P];
        for (int i = 0; i < outLength; i++) {
            for (int j = 0; j < P; j++) {
                indices[i][j] = left[i] + j;
            }
        }
        return indices;
    }

    // calculate_weights_indices---
    private static double[] transformU2Left(double[] u, double kernelWidth) {
        double[] newArr = new double[u.length];
        for (int i = 0; i < u.length; i++) {
            newArr[i] = Math.floor(u[i] - kernelWidth / 2);
        }
        return newArr;
    }

    // calculate_weights_indices---
    private static double[] transformX2U(double[] x, double scale) {
        double[] newArr = new double[x.length];
        for (int i = 0; i < x.length; i++) {
            newArr[i] = x[i] / scale + 0.5 * (1 - 1 / scale);
        }
        return newArr;
    }

    private static void drawImage(double[][][] rgb) throws IOException {
        int height = rgb.length;
        int width = rgb[0].length;
        BufferedImage img2 = new BufferedImage(width, height, 1);

        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                Color color = new Color(
                        (int) rgb[y][x][2],
                        (int) rgb[y][x][1],
                        (int) rgb[y][x][0]
                );
                img2.setRGB(x, y, color.getRGB());
            }
        }

        File fileOut = new File("D:\\code\\tt.jpg");
        ImageIO.write(img2, "jpg", fileOut);

    }

    private static double[][][] getImageRGB(File file) throws IOException {
        BufferedImage img = ImageIO.read(file);
        int height = img.getHeight();
        int width = img.getWidth();
        double[][][] matrix = new double[height][width][3];
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                Color color = new Color(img.getRGB(x, y));
                matrix[y][x][0] = color.getBlue();
                matrix[y][x][1] = color.getGreen();
                matrix[y][x][2] = color.getRed();
            }
        }
        return matrix;
    }
}
